/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$android-name: 'android';
$android-x: 0px;
$android-y: 0px;
$android-offset-x: 0px;
$android-offset-y: 0px;
$android-width: 512px;
$android-height: 512px;
$android-total-width: 768px;
$android-total-height: 768px;
$android-image: '~sprite.png';
$android: (0px, 0px, 0px, 0px, 512px, 512px, 768px, 768px, '~sprite.png', 'android', );
$-home-icon-name: 'Home-icon';
$-home-icon-x: 512px;
$-home-icon-y: 0px;
$-home-icon-offset-x: -512px;
$-home-icon-offset-y: 0px;
$-home-icon-width: 256px;
$-home-icon-height: 256px;
$-home-icon-total-width: 768px;
$-home-icon-total-height: 768px;
$-home-icon-image: '~sprite.png';
$-home-icon: (512px, 0px, -512px, 0px, 256px, 256px, 768px, 768px, '~sprite.png', 'Home-icon', );
$images-name: 'images';
$images-x: 256px;
$images-y: 512px;
$images-offset-x: -256px;
$images-offset-y: -512px;
$images-width: 204px;
$images-height: 204px;
$images-total-width: 768px;
$images-total-height: 768px;
$images-image: '~sprite.png';
$images: (256px, 512px, -256px, -512px, 204px, 204px, 768px, 768px, '~sprite.png', 'images', );
$-rss-icon-name: 'Rss-icon';
$-rss-icon-x: 512px;
$-rss-icon-y: 256px;
$-rss-icon-offset-x: -512px;
$-rss-icon-offset-y: -256px;
$-rss-icon-width: 256px;
$-rss-icon-height: 256px;
$-rss-icon-total-width: 768px;
$-rss-icon-total-height: 768px;
$-rss-icon-image: '~sprite.png';
$-rss-icon: (512px, 256px, -512px, -256px, 256px, 256px, 768px, 768px, '~sprite.png', 'Rss-icon', );
$-steering-icon-name: 'Steering-icon';
$-steering-icon-x: 0px;
$-steering-icon-y: 512px;
$-steering-icon-offset-x: 0px;
$-steering-icon-offset-y: -512px;
$-steering-icon-width: 256px;
$-steering-icon-height: 256px;
$-steering-icon-total-width: 768px;
$-steering-icon-total-height: 768px;
$-steering-icon-image: '~sprite.png';
$-steering-icon: (0px, 512px, 0px, -512px, 256px, 256px, 768px, 768px, '~sprite.png', 'Steering-icon', );
$spritesheet-width: 768px;
$spritesheet-height: 768px;
$spritesheet-image: '~sprite.png';
$spritesheet-sprites: ($android, $-home-icon, $images, $-rss-icon, $-steering-icon, );
$spritesheet: (768px, 768px, '~sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
